name: Deploy app

on:
  push:
    branches: [ "prod" ]

jobs:
  BE-build-test-package:
    name: BE Build & Test & Package
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: measdb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Build and test with Maven
        run: mvn -B package --file pom.xml -Dquarkus.datasource.reactive.url=vertx-reactive:postgresql://localhost:5432/measdb
        working-directory: backend

      - name: Upload resulting Build package
        uses: actions/upload-artifact@v4
        with:
          name: Package
          path: backend/target
          
  BE-docker-image-delivery:
    name: BE Docker Image Delivery
    runs-on: ubuntu-latest
    needs: BE-build-test-package

    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v4
        with:
          name: Package
          path: backend/target/

      - name: Generate image tag
        id: date
        run: echo "::set-output name=date::$(date +%Y%m%d-%H%M%S)"

      - name: Docker build
        run: docker build -t lukacetina/ots2025_backend:$TAG_NAME -f backend/src/main/docker/Dockerfile.jvm ./backend
        env:
          TAG_NAME: CD-${{ steps.date.outputs.date }}

      - name: Retag to latest
        run: docker tag lukacetina/ots2025_backend:$TAG_NAME lukacetina/ots2025_backend:latest
        env:
          TAG_NAME: CD-${{ steps.date.outputs.date }}

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker push
        run: docker push lukacetina/ots2025_backend:$TAG_NAME && docker push lukacetina/ots2025_backend:latest
        env:
          TAG_NAME: CD-${{ steps.date.outputs.date }}

  FE-build:
    name: FE Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
  
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
  
      - name: Install dependencies
        run: npm ci
        working-directory: frontend

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
        
      - name: Build frontend
        run: npm run build --no-progress 2>&1 >/dev/null || true # Mutes ESlint warnings
        working-directory: frontend

      - name: Upload frontend build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/

  FE-deploy:
    name: FE Deployment
    runs-on: ubuntu-latest
    needs: [FE-build, BE-build-test-package]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Download frontend build artifact
        uses: actions/download-artifact@v2
        with:
          name: frontend-build
          path: frontend/build/

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy to Vercel
        run: vercel --token ${{ secrets.VERCEL_TOKEN }} --prod --build-env REACT_APP_BACKEND_URL=${{ secrets.BACKEND_URL }}   
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}     
        working-directory: frontend/

